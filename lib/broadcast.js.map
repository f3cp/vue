{"version":3,"sources":["broadcast.js"],"names":["subscribeChannel","event","channel","callback","unsubscribeChannel","_message","_presence","_status","subscriber","args","call","_error","subscribe_listener_events_to_broadcast","forEach"],"mappings":";;;;;;;;AAAA;;;;;;;;AASA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,OAAjC,EAA0CC,QAA1C,EAAoD;AAClD,MAAI,CAACF,MAAMC,OAAN,CAAL,EAAqB;AACnBD,UAAMC,OAAN,IAAiBC,YAAY,EAA7B;AACD,GAFD,MAEO,IAAIF,MAAMC,OAAN,MAAmB,EAAnB,IAAyBC,QAA7B,EAAuC;AAC5CF,UAAMC,OAAN,IAAiBC,QAAjB;AACD;AACF;;AAQD,SAASC,kBAAT,CAA4BH,KAA5B,EAAmCC,OAAnC,EAA4C;AAC1C,MAAID,MAAMC,OAAN,CAAJ,EAAoB;AAClB,WAAOD,MAAMC,OAAN,CAAP;AACD;AACF;;;AAGC,oBAAc;AAAA;;AACZ,SAAKG,QAAL,GAAgB,EAAhB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,OAAL,GAAe,IAAf;AACD;;;;4BAQOL,O,EAASC,Q,EAAU;AACzBH,uBAAiB,KAAKK,QAAtB,EAAgCH,OAAhC,EAAyCC,QAAzC;AACD;;;6BAQQD,O,EAASC,Q,EAAU;AAC1BH,uBAAiB,KAAKM,SAAtB,EAAiCJ,OAAjC,EAA0CC,QAA1C;AACD;;;2BAOMA,Q,EAAU;AACf,UAAI,CAAC,KAAKI,OAAV,EAAmB;AACjB,aAAKA,OAAL,GAAeJ,YAAY,EAA3B;AACD,OAFD,MAEO,IAAI,KAAKI,OAAL,KAAiB,EAAjB,IAAuBJ,QAA3B,EAAqC;AAC1C,aAAKI,OAAL,GAAeJ,QAAf;AACD;AACF;;;gCASWF,K,EAAOC,O,EAAS;AAC1B,UAAIM,mBAAiBP,KAArB;;AAEA,UAAIO,eAAe,SAAnB,EAA8B;AAC5B,eAAO,KAAKA,UAAL,CAAP;AACD,OAFD,MAEO;AACL,eAAQ,KAAKA,UAAL,KAAoB,KAAKA,UAAL,EAAiBN,OAAjB,CAA5B;AACD;AACF;;;yBASID,K,EAAOC,O,EAASO,I,EAAM;AACzB,UAAID,mBAAiBP,KAArB;;AAEA,UAAI,KAAKO,UAAL,KAAoB,KAAKA,UAAL,EAAiBN,OAAjB,CAApB,IAAiD,OAAO,KAAKM,UAAL,EAAiBN,OAAjB,CAAP,KAAqC,UAA1F,EAAsG;AACpG,aAAKM,UAAL,EAAiBN,OAAjB,EAA0BQ,IAA1B,CAA+B,IAA/B,EAAqCD,IAArC;AACD;AACF;;;+BAOUA,I,EAAM;AACf,UAAI,KAAKF,OAAL,IAAgB,OAAO,KAAKA,OAAZ,KAAwB,UAA5C,EAAwD;AACtD,aAAKA,OAAL,CAAaG,IAAb,CAAkB,IAAlB,EAAwBD,IAAxB;AACD;AACF;;;0BAOKN,Q,EAAU;AACd,WAAKQ,MAAL,GAAcR,QAAd;AACD;;;8BAOSM,I,EAAM;AACd,UAAI,KAAKE,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,EAAuBD,IAAvB;AACD;AACF;;;gCAOWP,O,EAAS;AAAA;;AACnB,uBAAOU,sCAAP,CAA8CC,OAA9C,CAAsD,UAACZ,KAAD,EAAW;AAC/D,YAAIO,mBAAiBP,KAArB;;AAEAG,2BAAmB,MAAKI,UAAL,CAAnB,EAAqCN,OAArC;AACD,OAJD;AAKD","file":"broadcast.js","sourcesContent":["import config from '../config.json';\n\n/**\n * Subscribe a channel to a trigger event\n *\n * @param {string} event - (message, presence, status)\n * @param {string|[string]} channel\n * @param {function} callback to execute.\n */\nfunction subscribeChannel(event, channel, callback) {\n  if (!event[channel]) {\n    event[channel] = callback || {};\n  } else if (event[channel] === {} && callback) {\n    event[channel] = callback;\n  }\n}\n\n/**\n * Unsubscribe a channel of a trigger event\n *\n * @param {string} event - (message, presence, status)\n * @param {string|[string]} channel\n */\nfunction unsubscribeChannel(event, channel) {\n  if (event[channel]) {\n    delete event[channel];\n  }\n}\n\nexport default class {\n  constructor() {\n    this._message = {};\n    this._presence = {};\n    this._status = null;\n  }\n\n  /**\n   * Subscribe a callback to a channel through the message event\n   *\n   * @param {string} channel\n   * @param {function} callback\n   */\n  message(channel, callback) {\n    subscribeChannel(this._message, channel, callback);\n  }\n\n  /**\n   * Subscribe a callback to a channel through the presence event\n   *\n   * @param {string} channel\n   * @param {function} callback\n   */\n  presence(channel, callback) {\n    subscribeChannel(this._presence, channel, callback);\n  }\n\n  /**\n   * Subscribe a callback through the status event\n   *\n   * @param callback\n   */\n  status(callback) {\n    if (!this._status) {\n      this._status = callback || {};\n    } else if (this._status === {} && callback) {\n      this._status = callback;\n    }\n  }\n\n  /**\n   * Validate if a channel is subscribe to an event\n   *\n   * @param {string} event\n   * @param {string} channel\n   * @returns {boolean}\n   */\n  isSubscribe(event, channel) {\n    let subscriber = `_${event}`;\n\n    if (subscriber === '_status') {\n      return this[subscriber];\n    } else {\n      return (this[subscriber] && this[subscriber][channel]);\n    }\n  }\n\n  /**\n   * Emit a message to a channel through an event\n   *\n   * @param {string} event - (message, presence)\n   * @param {string} channel\n   * @param {object} args\n   */\n  emit(event, channel, args) {\n    let subscriber = `_${event}`;\n\n    if (this[subscriber] && this[subscriber][channel] && typeof this[subscriber][channel] === 'function') {\n      this[subscriber][channel].call(null, args);\n    }\n  }\n\n  /**\n   * Emit the status event through the callback subscribed\n   *\n   * @param {object} args\n   */\n  emitStatus(args) {\n    if (this._status && typeof this._status === 'function') {\n      this._status.call(null, args);\n    }\n  }\n\n  /**\n   * Subscribe or unsubscribe for catching errors from trigger events\n   *\n   * @param {function|null} callback\n   */\n  error(callback) {\n    this._error = callback;\n  }\n\n  /**\n   * Emit an error to the callback subscribed\n   *\n   * @param {object} args\n   */\n  emitError(args) {\n    if (this._error) {\n      this._error.call(null, args);\n    }\n  }\n\n  /**\n   * Unsubscribe a channel of all events\n   *\n   * @param {string} channel\n   */\n  unsubscribe(channel) {\n    config.subscribe_listener_events_to_broadcast.forEach((event) => {\n      let subscriber = `_${event}`;\n\n      unsubscribeChannel(this[subscriber], channel);\n    });\n  }\n}\n"]}